"use strict";(self.webpackChunkpass_3_identity=self.webpackChunkpass_3_identity||[]).push([[566],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),h=i,f=d["".concat(p,".").concat(h)]||d[h]||u[h]||a;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},o="PASS3 OpenID4VP",s={unversionedId:"pass3-id-connect/pass3-openid4vp-quick-integration",id:"pass3-id-connect/pass3-openid4vp-quick-integration",title:"PASS3 OpenID4VP",description:"OpenID4VP Diagram",source:"@site/docs/pass3-id-connect/pass3-openid4vp-quick-integration.md",sourceDirName:"pass3-id-connect",slug:"/pass3-id-connect/pass3-openid4vp-quick-integration",permalink:"/identity-dev-doc/docs/pass3-id-connect/pass3-openid4vp-quick-integration",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"PASS3 ID Login",permalink:"/identity-dev-doc/docs/pass3-id-connect/pass3-login"}},p={},l=[{value:"OpenID4VP Diagram",id:"openid4vp-diagram",level:3},{value:"OpenID4VP in PASS3",id:"openid4vp-in-pass3",level:2},{value:"Package Install",id:"package-install",level:3},{value:"OAuth2 Client Configuration",id:"oauth2-client-configuration",level:3},{value:"OpenID4VP Provider and Verifier",id:"openid4vp-provider-and-verifier",level:3},{value:"1. Auto Lookup Config from OpenID Connect Discovery",id:"1-auto-lookup-config-from-openid-connect-discovery",level:3},{value:"2. Manual Config",id:"2-manual-config",level:3},{value:"Configure OAuth2 Client",id:"configure-oauth2-client",level:2},{value:"Create Endpoints Handler",id:"create-endpoints-handler",level:2},{value:"Presentation Definition",id:"presentation-definition",level:3},{value:"Presentation Submission",id:"presentation-submission",level:3}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pass3-openid4vp"},"PASS3 OpenID4VP"),(0,i.kt)("h3",{id:"openid4vp-diagram"},"OpenID4VP Diagram"),(0,i.kt)("p",null,"OpenID4VP is an extension of OpenID Connect that allows the exchange of Verifiable Credentials (VC) between the Relying Party (RP) and the Identity Provider (IdP)."),(0,i.kt)("mermaid",{value:'sequenceDiagram\n    participant user\n    participant client\n    participant pass3\n    participant protected_resource\n\n    user ->> client: Click "Login by PASS3"\n    activate client\n    client --\x3e> pass3: Redirect PASS3 authorization page\n    deactivate client\n    activate pass3\n    pass3 --\x3e> user: Show authentication page\n    deactivate pass3\n\n    user ->> pass3: User Authenticate\n    activate pass3\n    pass3 --\x3e> user: Show authorization page for approval\n    deactivate pass3\n\n    user ->> pass3: User Authorize\n    activate pass3\n    pass3 --\x3e> client: Redirect to redirect_uri <br/> with code\n    deactivate pass3\n    activate client\n    client --\x3e> pass3: Client do exchange token\n    deactivate client\n    activate pass3\n    pass3 --\x3e> client: Return vp_token\n    deactivate pass3\n\n    client ->> protected_resource: Client access protected resources\n    activate protected_resource\n    protected_resource --\x3e> client: return resources\n    deactivate protected_resource\n'}),(0,i.kt)("h2",{id:"openid4vp-in-pass3"},"OpenID4VP in PASS3"),(0,i.kt)("p",null,"Here is an example of using OpenID4VP in the Identity SDK with the ",(0,i.kt)("inlineCode",{parentName:"p"},"authorization code")," grant type"),(0,i.kt)("p",null,"You can find the full example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pass3id/identity-sdk/tree/main/examples/web-demo"},"here")),(0,i.kt)("h3",{id:"package-install"},"Package Install"),(0,i.kt)("p",null,"Install Identity-SDK package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"go get github.com/pass3id/identity-sdk/oi4vp\n")),(0,i.kt)("h3",{id:"oauth2-client-configuration"},"OAuth2 Client Configuration"),(0,i.kt)("p",null,"The configuration of the OAuth2 client requires the ",(0,i.kt)("inlineCode",{parentName:"p"},"client_id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client_secret"),", which can be obtained from PASS3."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'var (\n    clientID     = os.Getenv("PASS3_OAUTH2_CLIENT_ID")\n    clientSecret = os.Getenv("PASS3_OAUTH2_CLIENT_SECRET")\n)\n')),(0,i.kt)("h3",{id:"openid4vp-provider-and-verifier"},"OpenID4VP Provider and Verifier"),(0,i.kt)("p",null,"A provider is used to store settings from the authentication server, such as the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth URL")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"token URL"),"."),(0,i.kt)("p",null,"A verifier is used to verify tokens obtained from the authentication server, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"access tokens")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VP tokens"),"."),(0,i.kt)("p",null,"There are two ways to initiate a provider."),(0,i.kt)("h3",{id:"1-auto-lookup-config-from-openid-connect-discovery"},"1. Auto Lookup Config from OpenID Connect Discovery"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'ctx := context.Background()\n\nprovider, err := oi4vp.NewProvider(ctx, "https://pass3.id")\nif err != nil {\n    // handle error\n}\n\n')),(0,i.kt)("h3",{id:"2-manual-config"},"2. Manual Config"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'config := oi4vp.ProviderConfig{\n    AuthURL:  "http://localhost:8080/authorize",\n    TokenURL: "http://localhost:8080/token",\n}\n\nprovider := config.NewProvider(context.Background())\n')),(0,i.kt)("p",null,"There are 2 verifier type:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"TokenVerifier")," for verify registered claims in token like expirations, issuer, audience, etc."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"VPTokenVerifier")," for verify registerd claims and VCredential signature")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'verifier := oi4vp.NewVPVerifier(&oi4vp.Config{\n    SkipClientIDCheck: true,\n    SkipExpiryCheck:   true,\n})\n\n_, err := verifier.Verify(context.Background(), vpToken)\n\nif err != nil {\n    // handle error\n}\n\n// get claims from VP token\nvar claims struct {\n    VC map[string]interface{} `json:"vc"`\n}\n\nif err := verifier.Credentials[0].BuildClaims(&claims); err != nil {\n    t.Errorf("%v", err)\n}\n\nfmt.Println(claims.VC["id"])\nfmt.Println(claims.VC["credentialSubject"])\n\n')),(0,i.kt)("h2",{id:"configure-oauth2-client"},"Configure OAuth2 Client"),(0,i.kt)("p",null,"Available credential type from PASS3 available in ",(0,i.kt)("inlineCode",{parentName:"p"},"/oi4vp/credentials.go"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'oauth2Config := oauth2.Config{\n    ClientID:     clientID,\n    ClientSecret: clientSecret,\n    RedirectURL:  "http://client.com/auth/pass3/callback",\n\n    // Discovery returns the OAuth2 endpoints.\n    Endpoint: provider.Endpoint(),\n\n    Scopes: []string{LinkedIdentifiers},\n}\n\n')),(0,i.kt)("h2",{id:"create-endpoints-handler"},"Create Endpoints Handler"),(0,i.kt)("p",null,"We need two endpoints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'The first endpoint is used for redirection when the user wants to initiate the "single sign-on" login process.'),(0,i.kt)("li",{parentName:"ul"},"The second endpoint is a callback endpoint that receives the authorization code from the provider.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"login redirect endpoint")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'http.HandleFunc("/login", func(w http.ResponseWriter, r *http.Request) {\n    state, err := randString(16)\n    if err != nil {\n        http.Error(w, "Internal error", http.StatusInternalServerError)\n        return\n    }\n    nonce, err := randString(16)\n    if err != nil {\n        http.Error(w, "Internal error", http.StatusInternalServerError)\n        return\n    }\n    setCallbackCookie(w, r, "state", state)\n    setCallbackCookie(w, r, "nonce", nonce)\n\n    http.Redirect(w, r, config.AuthCodeURL(state, oi4vp.Nonce(nonce)), http.StatusFound)\n})\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"callback endpoint")),(0,i.kt)("p",null,"In the callback endpoint handler, we can exchange the authorization code for an access token and VP token."),(0,i.kt)("p",null,"Then, we perform validation and verification on these tokens."),(0,i.kt)("p",null,"After that, we extract the ",(0,i.kt)("inlineCode",{parentName:"p"},"claims")," data from the verifiable presentation (VP) token. In this case, the credential is ",(0,i.kt)("inlineCode",{parentName:"p"},"LinkedIdentifiers"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'http.HandleFunc("/auth/pass3/callback", func(w http.ResponseWriter, r *http.Request) {\n    state, err := r.Cookie("state")\n    if err != nil {\n        http.Error(w, "state not found", http.StatusBadRequest)\n        return\n    }\n    if r.URL.Query().Get("state") != state.Value {\n        http.Error(w, "state did not match", http.StatusBadRequest)\n        return\n    }\n\n    oauth2Token, err := config.Exchange(ctx, r.URL.Query().Get("code"))\n    if err != nil {\n        http.Error(w, "Failed to exchange token: "+err.Error(), http.StatusInternalServerError)\n        return\n    }\n\n    vpToken, ok := oauth2Token.Extra("vp_token").(string)\n    if !ok {\n        http.Error(w, "No vp_token field in oauth2 token.", http.StatusInternalServerError)\n        return\n    }\n\n    token, err := verifier.Verify(ctx, accessToken)\n    if err != nil {\n        http.Error(w, "Failed to verify VP Token: "+err.Error(), http.StatusInternalServerError)\n        return\n    }\n\n    nonce, err := r.Cookie("nonce")\n    if err != nil {\n        http.Error(w, "nonce not found", http.StatusBadRequest)\n        return\n    }\n    if token.Nonce != nonce.Value {\n        http.Error(w, "nonce did not match", http.StatusBadRequest)\n        return\n    }\n\n    w.Write("jos")\n})\n')),(0,i.kt)("h3",{id:"presentation-definition"},"Presentation Definition"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"presentation definition")," is used to define the credential that we want to request from the authentication server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'\npd := &PresentationDefinition{\n    ID: "LinkedIdentifiers",\n    InputDescriptors: []InputDescriptor{\n        {\n            ID: "id card credential",\n            Format: map[string]any{\n                "ldp_vc": map[string]any{\n                    "proof_type": []string{"Ed25519Signature2018"},\n                },\n            },\n        },\n    },\n}\n\npdstr, _ := pd.String()\n\nurl := oauthConfig.AuthCodeURL(oauthState, oauth2.SetAuthURLParam("presentation_definition", pdstr))\n')),(0,i.kt)("p",null,"Presentation Definition from URI"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'pd, _ := PresentationDefinitionFromURI("https://example.com/presentationdefs?ref=idcard_presentation_request")\n\npdstr, _ := pd.String()\n\nurl := oauthConfig.AuthCodeURL(oauthState, oauth2.SetAuthURLParam("presentation_definition", pdstr))\n\n')),(0,i.kt)("h3",{id:"presentation-submission"},"Presentation Submission"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"presentation submission")," contains mappings between the requested Verifiable Credentials and where to find them within the returned VP Token"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// after get VP token from callback endpoint\n\ntoken, err := oauthConfig.Exchange(context.Background(), code)\nif err != nil {\n    // handle error\n}\n\npsstr := token.Extra("presentation_submission").(string)\n\nps, _ := PresentationSubmissionFromString(psstr)\n\nfmt.Println(ps.ID)\n')))}u.isMDXComponent=!0}}]);